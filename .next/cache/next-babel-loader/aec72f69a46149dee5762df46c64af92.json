{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport { Form, Formik, Field } from \"formik\";\nimport { useRouter } from \"next/dist/client/router\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport * as yup from \"yup\";\nimport { cities } from \"../../components/cities\";\nimport RegisterUserMutation from \"../../components/relay/mutations/RegisterUserMutation\";\nvar validationSchema = yup.object({\n  name: yup.string().required(\"Name cannot be empty\"),\n  college: yup.string().required(\"College cannot be empty\"),\n  email: yup.string().email(\"Provide a valid Email ID\").required(\"Email cannot be empty\"),\n  phone: yup.string().required(\"Phone cannot be empty\")\n});\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      // flexGrow: 1,\n      backgroundColor: '#3997F5',\n      minHeight: '100vh',\n      margin: '0px',\n      padding: '0px',\n      boxSizing: 'border-box',\n      paddingBottom: '6px'\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    },\n    list: {\n      width: 320\n    },\n    fullList: {\n      width: 'auto'\n    },\n    sublist: {\n      marginLeft: theme.spacing(3)\n    },\n    paper: _defineProperty({\n      width: '50%',\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: theme.spacing(4),\n      padding: theme.spacing(2),\n      borderRadius: '25px'\n    }, theme.breakpoints.down('md'), {\n      width: '96%'\n    }),\n    textField: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    },\n    divider: {\n      marginTop: theme.spacing(4)\n    },\n    table: {\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      width: '90%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2)\n    },\n    button: {\n      margin: theme.spacing(2)\n    },\n    buttonGroup: {\n      // float: \"right\",\n      width: 'fit-content',\n      margin: 'auto' //marginTop: theme.spacing(4)\n\n    },\n    heading: {\n      color: 'white',\n      marginBottom: theme.spacing(4),\n      paddingTop: '40px'\n    },\n    subHeading: {\n      color: '#001831',\n      fontSize: '1.2rem'\n    },\n    details: {\n      textAlign: \"center\"\n    },\n    center: {\n      width: 'fit-content',\n      margin: 'auto'\n    },\n    promoB: _defineProperty({}, theme.breakpoints.down('md'), {\n      height: '200px'\n    }),\n    promoButton: _defineProperty({}, theme.breakpoints.down('md'), {\n      marginTop: '15px',\n      marginLeft: theme.spacing(2)\n    }),\n    text: _defineProperty({\n      marginRight: theme.spacing(2)\n    }, theme.breakpoints.down('md'), {\n      marginTop: '165px',\n      marginLeft: theme.spacing(2)\n    })\n  });\n});\n\nvar Register = function Register(_ref) {\n  var viewer = _ref.viewer,\n      refetch = _ref.refetch,\n      environment = _ref.environment,\n      setSuccessMessage = _ref.setSuccessMessage,\n      setErrorMessage = _ref.setErrorMessage;\n  var classes = useStyles();\n  var router = useRouter();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      terms = _React$useState2[0],\n      setTerms = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (viewer.step === \"REGISTER\") {\n      router.push('/dashboard/register');\n    }\n\n    if (viewer.step === 'CHOOSE_TEAM') {\n      router.push('/dashboard/team');\n    }\n\n    if (viewer.step === \"PAYMENT\") {\n      router.push(\"/dashboard/payment\");\n    }\n\n    if (viewer.step === \"TEST\") {\n      router.push(\"/dashboard/test\");\n    }\n  }, [viewer.step]);\n  var initialValues = {\n    name: \"\",\n    email: viewer.email,\n    college: \"\",\n    phone: \"\",\n    year: 1,\n    city: null\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    var userInput = {\n      name: values.name,\n      phone: values.phone,\n      year: values.year,\n      college: values.college,\n      city: values.city.name\n    };\n    RegisterUserMutation(environment, userInput, {\n      onCompleted: function onCompleted() {\n        setSuccessMessage('Registered Successfully');\n        refetch();\n        router.push(\"/dashboard/team\");\n      },\n      onError: function onError(err) {\n        setErrorMessage('Something went wrong Please try again later!');\n      }\n    });\n  };\n\n  var handleCity = function handleCity(values, setValues, newValue) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      city: newValue\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    id: \"reg\"\n  }, __jsx(Box, null, __jsx(ListItem, {\n    className: classes.heading\n  }, __jsx(ListItemText, {\n    primary: ' Step-1 Registration',\n    primaryTypographyProps: {\n      variant: 'h4',\n      align: 'center'\n    },\n    secondary: \"Register now to be a part of ISTE's multi city quiz competition: ChimeraX\",\n    secondaryTypographyProps: {\n      className: \"\".concat(classes.subHeading),\n      align: 'center'\n    }\n  })), __jsx(Formik, {\n    onSubmit: function onSubmit(values) {\n      return handleSubmit(values);\n    },\n    validationSchema: validationSchema,\n    initialValues: initialValues\n  }, function (_ref2) {\n    var values = _ref2.values,\n        setValues = _ref2.setValues;\n    return __jsx(Form, {\n      \"aria-label\": \"Sign up form\",\n      id: \"sign-up-form\"\n    }, __jsx(Box, null, __jsx(Paper, {\n      elevation: 4,\n      className: classes.paper\n    }, __jsx(ListItem, {\n      className: classes.details\n    }, __jsx(ListItemText, {\n      primary: 'Personal Details',\n      primaryTypographyProps: {\n        variant: 'h6'\n      },\n      secondary: 'Please fill these details carefully, you will be informed about ChimeraX through these details'\n    })), __jsx(ListItem, null, __jsx(Field, {\n      name: \"name\"\n    }, function (_ref3) {\n      var field = _ref3.field,\n          meta = _ref3.meta;\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        id: \"name-input\",\n        label: \"Name\",\n        required: true\n      }, field, {\n        error: !!(meta.touched && meta.error),\n        helperText: meta.touched ? meta.error : '',\n        variant: \"outlined\",\n        size: \"small\",\n        className: classes.textField\n      }));\n    })), __jsx(ListItem, null, __jsx(Field, {\n      name: \"email\"\n    }, function (_ref4) {\n      var field = _ref4.field,\n          meta = _ref4.meta;\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        id: \"name-input\",\n        label: \"Email\",\n        required: true\n      }, field, {\n        error: !!(meta.touched && meta.error),\n        helperText: meta.touched ? meta.error : '',\n        variant: \"outlined\",\n        size: \"small\",\n        className: classes.textField,\n        disabled: true\n      }));\n    })), __jsx(ListItem, null, __jsx(Field, {\n      name: \"college\"\n    }, function (_ref5) {\n      var field = _ref5.field,\n          meta = _ref5.meta;\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        id: \"name-input\",\n        label: \"College\",\n        required: true\n      }, field, {\n        error: !!(meta.touched && meta.error),\n        helperText: meta.touched ? meta.error : '',\n        variant: \"outlined\",\n        size: \"small\",\n        className: classes.textField\n      }));\n    })), __jsx(ListItem, null, __jsx(Field, {\n      name: \"phone\"\n    }, function (_ref6) {\n      var field = _ref6.field,\n          meta = _ref6.meta;\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        id: \"name-input\",\n        label: \"Mobile no.\",\n        required: true\n      }, field, {\n        error: !!(meta.touched && meta.error),\n        helperText: meta.touched ? meta.error : '',\n        variant: \"outlined\",\n        size: \"small\",\n        className: classes.textField\n      }));\n    })), __jsx(ListItem, null, __jsx(Field, {\n      name: \"city\"\n    }, function (_ref7) {\n      var field = _ref7.field,\n          meta = _ref7.meta;\n      return __jsx(Autocomplete, {\n        id: \"combo-box-demo\",\n        options: cities,\n        getOptionLabel: function getOptionLabel(option) {\n          return \"\".concat(option.name, \" , \").concat(option.state);\n        },\n        style: {\n          width: '98%'\n        },\n        value: values.city,\n        onChange: function onChange(event, newValue) {\n          return handleCity(values, setValues, newValue);\n        },\n        renderInput: function renderInput(params) {\n          return __jsx(TextField, _extends({}, params, {\n            fullWidth: true,\n            id: \"name-input\",\n            label: \"City where your college exists\",\n            required: true,\n            error: !!(meta.touched && meta.error),\n            helperText: meta.touched ? meta.error : '',\n            variant: \"outlined\",\n            size: \"small\",\n            className: classes.textField\n          }));\n        } // <TextField {...params} label=\"Combo box\" variant=\"outlined\" />\n\n      });\n    })), __jsx(Box, {\n      className: classes.buttonGroup\n    }, __jsx(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      variant: \"contained\",\n      className: classes.button\n    }, \"Proceed\")))));\n  })));\n};\n\nexport default Register;","map":null,"metadata":{},"sourceType":"module"}