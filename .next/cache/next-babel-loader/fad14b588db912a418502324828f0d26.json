{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Radio from \"@material-ui/core/Radio\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useQuery } from 'relay-hooks';\nimport query from \"../../components/relay/queries/GetUserQuery\";\nimport ReceivedInvitation from '../../components/recivedInvitations';\nimport SendInvitation from '../../components/sentInvitation';\nimport SendInvitationMutation from \"../../components/relay/mutations/SendInvitationMutation\";\nimport CustomDrawer from '../../components/customDrawer';\nimport PlayAsIndividualMutation from \"../../components/relay/mutations/PlayAsIndividualMutation\";\nimport { useRouter } from 'next/dist/client/router';\nimport cookie from 'js-cookie';\nimport Navbar from '../../components/Navbar';\nimport LoadingScreen from '../../components/loadingScreen';\nimport DialogBox from '../../components/dialog';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      margin: 0,\n      padding: 0,\n      boxSizing: 'border-box',\n      height: \"100vh\"\n    },\n    leftGrid: _defineProperty({}, theme.breakpoints.up('sm'), {\n      paddingLeft: theme.spacing(8)\n    }),\n    header: _defineProperty({}, theme.breakpoints.down('sm'), {\n      paddingLeft: theme.spacing(3)\n    }),\n    radioBtn: {\n      margin: 10\n    },\n    menuButton: {// marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1\n    },\n    paper: {\n      height: '100%'\n    },\n    container: _defineProperty({\n      // height: window.outerHeight + 150,\n      height: '100vh'\n    }, theme.breakpoints.down('sm'), {\n      height: 'auto',\n      paddingBottom: theme.spacing(2)\n    }),\n    dashboardImg: _defineProperty({\n      width: '80%'\n    }, theme.breakpoints.down('sm'), {\n      width: '40%'\n    }),\n    Head_title: {\n      fontSize: '2.4rem' // textAlign: 'center',\n      // margin: 'auto',\n\n    },\n    invitation_button: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(1),\n      marginBottom: '6px',\n      marginTop: '6px'\n    },\n    proceed_button: {\n      marginTop: theme.spacing(4),\n      marginLeft: '50%',\n      marginBottom: theme.spacing(2)\n    },\n    tab: {\n      overflow: 'scroll'\n    }\n  });\n});\n\nvar Team = function Team(_ref) {\n  var environment = _ref.environment,\n      viewer = _ref.viewer,\n      setSuccessMessage = _ref.setSuccessMessage,\n      setErrorMessage = _ref.setErrorMessage,\n      refetch = _ref.refetch;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tab = _React$useState2[0],\n      setTab = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      receiver = _React$useState4[0],\n      setReceiver = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      send = _React$useState6[0],\n      setSend = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      rendered = _React$useState8[0],\n      setRendered = _React$useState8[1];\n\n  var refetchRef = React.useRef(null);\n\n  var _React$useState9 = React.useState('B'),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      radio = _React$useState10[0],\n      setRadio = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      open = _React$useState12[0],\n      setOpen = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      openDialog = _React$useState14[0],\n      setOpenDialog = _React$useState14[1];\n\n  var router = useRouter();\n  React.useEffect(function () {\n    if (viewer.step === \"REGISTER\") {\n      router.push(\"/dashboard/register\");\n    }\n\n    if (viewer.step === \"PAYMENT\") {\n      router.push(\"/dashboard/payment\");\n    }\n\n    if (viewer.step === \"TEST\") {\n      router.push(\"/dashboard/test\");\n    }\n\n    if (viewer.step === \"CHOOSE_TEAM\") {}\n  }, []);\n\n  var _useQuery = useQuery(query),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      retry = _useQuery.retry,\n      isLoading = _useQuery.isLoading;\n\n  if (isLoading && !rendered) {\n    return __jsx(LoadingScreen, {\n      loading: true\n    });\n  }\n\n  var dummyUsers = data === null || data === void 0 ? void 0 : data.getSingleUsers.filter(function (user) {\n    return user.city === viewer.city;\n  });\n\n  var handleSendInvitation = function handleSendInvitation() {\n    console.log(receiver);\n    var receiverInput = {\n      receiverId: receiver._id,\n      receiverEmail: receiver.email,\n      receiverName: receiver.name\n    };\n    SendInvitationMutation(environment, receiverInput, {\n      onCompleted: function onCompleted(res) {\n        setSuccessMessage('Invitation Sent');\n        setReceiver(null);\n        setRendered(true);\n        setSend(!send);\n        retry();\n        refetchRef.current && refetchRef.current.retry();\n      },\n      onError: function onError(err) {\n        setErrorMessage('Something went wrong Please try again later!');\n      }\n    });\n  };\n\n  var handlePlayAsIndividual = function handlePlayAsIndividual() {\n    PlayAsIndividualMutation(environment, {\n      onCompleted: function onCompleted() {\n        setSuccessMessage('Redirecting ....');\n        router.push(\"/dashboard/payment\");\n        refetch();\n      },\n      onError: function onError() {\n        setErrorMessage('Something went wrong Please try again later!');\n      }\n    });\n  };\n\n  var handleChange = function handleChange(event, newValue) {\n    setTab(newValue);\n  };\n\n  var logoutHandle = function logoutHandle() {\n    cookie.remove('authorization');\n    router.push('/');\n  };\n\n  var handleClose = function handleClose() {\n    return setOpenDialog(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(DialogBox, {\n    environment: environment,\n    openDialog: openDialog,\n    handleClose: handleClose,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage,\n    refetch: refetch\n  }), __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(CustomDrawer, {\n    name: viewer.name,\n    username: viewer.email,\n    open: open,\n    setOpen: setOpen,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage\n  }), __jsx(Navbar, {\n    setOpen: setOpen,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage\n  }), __jsx(Grid, {\n    container: true,\n    component: \"main\",\n    onClick: function onClick() {\n      return setOpen(false);\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 8,\n    className: classes.leftGrid\n  }, __jsx(Box, {\n    mt: 5,\n    mb: 5,\n    className: classes.header\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"flex-start\",\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    sm: 4,\n    alignItems: \"center\"\n  }, __jsx(\"img\", {\n    src: \"/dashboard.png\",\n    className: classes.dashboardImg\n  })), __jsx(Grid, {\n    item: true,\n    sm: 8\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: classes.Head_title\n  }, __jsx(\"b\", null, \"Hello, \", viewer.name)), __jsx(Typography, null, \"Welcome to your ChimeraX dashboard\")))), __jsx(Box, {\n    ml: 2,\n    mb: 2\n  }, __jsx(Typography, {\n    variant: \"h5\"\n  }, \"Step-2, Select whether you want to play as an individual or as a team?\")), __jsx(Box, null, __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Radio, {\n    className: classes.radioBtn,\n    checked: radio === 'A',\n    value: \"A\",\n    name: \"radio-button-demo\",\n    inputProps: {\n      'aria-label': 'A'\n    },\n    onClick: function onClick() {\n      return setRadio('A');\n    }\n  }), __jsx(\"div\", null, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Play as an Individual\"), __jsx(Typography, null, \"Be a lone ranger\"))), __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Radio, {\n    className: classes.radioBtn,\n    checked: radio === 'B',\n    value: \"B\",\n    name: \"radio-button-demo\",\n    inputProps: {\n      'aria-label': 'B'\n    },\n    onClick: function onClick() {\n      return setRadio('B');\n    }\n  }), __jsx(\"div\", null, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Play as a Team\"), __jsx(Typography, null, \"Be a dynamic duo\")))), radio === 'B' && __jsx(Box, {\n    ml: 8\n  }, __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Typography, {\n    variant: \"body1\"\n  }, \"Send Invitation to your teammate\")), __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Autocomplete, {\n    id: \"combo-box-demo\" //@ts-ignore\n    ,\n    options: dummyUsers,\n    value: receiver,\n    onChange: function onChange(event, newValue) {\n      setReceiver(newValue);\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return \"\".concat(option.name, \" \").concat(option.email);\n    },\n    renderOption: function renderOption(option) {\n      return __jsx(React.Fragment, null, __jsx(\"span\", null, __jsx(Avatar, {\n        alt: \"Remy Sharp\",\n        src: \"/dummy.png\"\n      })), \"\\xA0 \", option.name, \" (\", option.email, \")\");\n    },\n    style: {\n      width: 400\n    },\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        label: \"Search Team Member\",\n        variant: \"outlined\",\n        size: \"small\"\n      }));\n    }\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: receiver === null,\n    onClick: handleSendInvitation,\n    className: classes.invitation_button\n  }, \"Send\", ' '))), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: radio === 'B' // onClick={handlePlayAsIndividual}\n    ,\n    onClick: function onClick() {\n      setOpenDialog(true);\n    },\n    className: classes.proceed_button\n  }, \"PROCEED\", ' ')), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4 //   component={Paper} elevation={6} square\n\n  }, __jsx(Paper, {\n    elevation: 6,\n    className: classes.container\n  }, __jsx(Tabs, {\n    value: tab,\n    onChange: handleChange,\n    indicatorColor: \"primary\" // textColor=\"primary\"\n    ,\n    variant: \"fullWidth\"\n  }, __jsx(Tab, {\n    label: \"Sent Invitations\"\n  }), __jsx(Tab, {\n    label: \"Received Invitations\"\n  }), \"classsName=\", classes.tab), __jsx(Divider, null), tab === 0 ? __jsx(SendInvitation, {\n    refetchRef: refetchRef,\n    send: send,\n    environment: environment,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage\n  }) : __jsx(ReceivedInvitation, {\n    refetchRef: refetchRef,\n    environment: environment,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage,\n    refetch: refetch\n  }))))));\n};\n\nexport default Team;","map":null,"metadata":{},"sourceType":"module"}