{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport axios from 'axios';\nimport { authenticate } from '../components/utils';\nimport { useRouter } from 'next/router';\n// import { BrowserRouter as Router, Switch, Route, useParams } from 'react-router-dom';\nlet resetPasswordLink;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100vh'\n  },\n  form: {\n    width: '50%',\n    // Fix IE11 issue.\n    marginTop: theme.spacing(1),\n    marginLeft: '25%'\n  },\n  title: {\n    textAlign: 'center'\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    width: '100px'\n  }\n}));\n\nconst ResetPassword = ({\n  setSuccessMessage,\n  setErrorMessage\n}) => {\n  const classes = useStyles();\n  const [formData, setFormData] = React.useState({\n    newpassword: '',\n    confirmPassword: ''\n  });\n  const router = useRouter();\n\n  if (false) {\n    const url = window.location.search; //console.log(url);\n\n    resetPasswordLink = url.slice(7);\n    console.log(resetPasswordLink);\n  }\n\n  const handleChange = field => e => {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n      [field]: e.target.value\n    }));\n  };\n\n  const handleSubmit = values => {\n    verify(values);\n    const newPassword = values.newpassword;\n    axios.put(`${process.env.NEXT_PUBLIC_BACKEND}/api/resetpassword`, {\n      resetPasswordLink,\n      newPassword\n    }).then(response => {\n      authenticate(response, () => {\n        setSuccessMessage('Password changed successfully');\n        router.push('/');\n      });\n    }).catch(error => {\n      setErrorMessage('Something went wrong Please try again later!');\n      return error;\n    });\n  };\n\n  const initialValues = {\n    newpassword: '' //confirmPassword: '',\n\n  };\n  const validationSchema = yup.object({\n    newpassword: yup.string().min(6, 'Password must be minimum of 6 characters')\n  });\n\n  function verify(values) {\n    // if(values.newpassword!=values.confirmPassword)\n    //   alert(\"password doesnt match\");\n    //   else\n    setFormData(_objectSpread({}, formData));\n  }\n\n  return __jsx(Grid, {\n    container: true,\n    component: \"main\",\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 8\n  }, __jsx(Box, {\n    mt: 5,\n    className: classes.title\n  }, __jsx(Typography, {\n    align: \"center\",\n    component: \"span\",\n    variant: \"h3\",\n    color: \"inherit\"\n  }, \"Reset Your Password\")), __jsx(Box, {\n    className: classes.title\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 8,\n    component: Paper,\n    elevation: 0,\n    square: true\n  }, __jsx(Formik, {\n    onSubmit: values => handleSubmit(values),\n    validationSchema: validationSchema,\n    initialValues: initialValues\n  }, __jsx(Form, {\n    \"aria-label\": \"reset_password_form\",\n    id: \"reset_password_form\",\n    className: classes.form\n  }, __jsx(Field, {\n    name: \"newpassword\"\n  }, ({\n    field,\n    meta\n  }) => __jsx(TextField, _extends({\n    fullWidth: true,\n    id: \"newPassword-input\",\n    label: \"New Password\",\n    required: true\n  }, field, {\n    error: !!(meta.touched && meta.error),\n    helperText: meta.touched ? meta.error : '',\n    variant: \"outlined\" // className={classes.field}\n    ,\n    margin: \"normal\",\n    type: \"password\"\n  }))), __jsx(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    className: classes.submit,\n    color: \"primary\"\n  }, \"Submit\")))));\n};\n\nexport default ResetPassword;","map":null,"metadata":{},"sourceType":"module"}