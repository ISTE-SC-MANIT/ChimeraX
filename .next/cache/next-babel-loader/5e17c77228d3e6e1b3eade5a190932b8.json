{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Radio from \"@material-ui/core/Radio\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useQuery } from 'relay-hooks';\nimport query from \"../../components/relay/queries/GetUserQuery\";\nimport ReceivedInvitation from '../../components/recivedInvitations';\nimport SendInvitation from '../../components/sentInvitation';\nimport SendInvitationMutation from \"../../components/relay/mutations/SendInvitationMutation\";\nimport CustomDrawer from '../../components/customDrawer';\nimport PlayAsIndividualMutation from \"../../components/relay/mutations/PlayAsIndividualMutation\";\nimport { useRouter } from 'next/dist/client/router';\nimport cookie from 'js-cookie';\nimport Navbar from '../../components/Navbar';\nimport LoadingScreen from '../../components/loadingScreen';\nimport DialogBox from '../../components/dialog';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    margin: 0,\n    padding: 0,\n    boxSizing: 'border-box',\n    height: \"100vh\"\n  },\n  leftGrid: {\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(8)\n    }\n  },\n  header: {\n    [theme.breakpoints.down('sm')]: {\n      paddingLeft: theme.spacing(3)\n    }\n  },\n  radioBtn: {\n    margin: 10\n  },\n  menuButton: {// marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1\n  },\n  paper: {\n    height: '100%'\n  },\n  container: {\n    // height: window.outerHeight + 150,\n    height: '100vh',\n    [theme.breakpoints.down('sm')]: {\n      height: 'auto',\n      paddingBottom: theme.spacing(2)\n    }\n  },\n  dashboardImg: {\n    width: '80%',\n    [theme.breakpoints.down('sm')]: {\n      width: '40%'\n    }\n  },\n  Head_title: {\n    fontSize: '2.4rem' // textAlign: 'center',\n    // margin: 'auto',\n\n  },\n  invitation_button: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(1),\n    marginBottom: '6px',\n    marginTop: '6px'\n  },\n  proceed_button: {\n    marginTop: theme.spacing(4),\n    marginLeft: '50%',\n    marginBottom: theme.spacing(2)\n  },\n  tab: {\n    overflow: 'scroll'\n  }\n}));\n\nconst Team = ({\n  environment,\n  viewer,\n  setSuccessMessage,\n  setErrorMessage,\n  refetch\n}) => {\n  const classes = useStyles();\n  const [tab, setTab] = React.useState(0);\n  const [receiver, setReceiver] = React.useState(null);\n  const [send, setSend] = React.useState(false);\n  const [rendered, setRendered] = React.useState(false);\n  const refetchRef = React.useRef(null);\n  const [radio, setRadio] = React.useState('B');\n  const [open, setOpen] = React.useState(false);\n  const [openDialog, setOpenDialog] = React.useState(false);\n  const router = useRouter();\n  React.useEffect(() => {\n    if (viewer.step === \"REGISTER\") {\n      router.push(\"/dashboard/register\");\n    }\n\n    if (viewer.step === \"PAYMENT\") {\n      router.push(\"/dashboard/payment\");\n    }\n\n    if (viewer.step === \"TEST\") {\n      router.push(\"/dashboard/test\");\n    }\n\n    if (viewer.step === \"CHOOSE_TEAM\") {}\n  }, []);\n  const {\n    data,\n    error,\n    retry,\n    isLoading\n  } = useQuery(query);\n\n  if (isLoading && !rendered) {\n    return __jsx(LoadingScreen, {\n      loading: true\n    });\n  }\n\n  let dummyUsers = data === null || data === void 0 ? void 0 : data.getSingleUsers.filter(user => user.city === viewer.city);\n\n  const handleSendInvitation = () => {\n    console.log(receiver);\n    const receiverInput = {\n      receiverId: receiver._id,\n      receiverEmail: receiver.email,\n      receiverName: receiver.name\n    };\n    SendInvitationMutation(environment, receiverInput, {\n      onCompleted: res => {\n        setSuccessMessage('Invitation Sent');\n        setReceiver(null);\n        setRendered(true);\n        setSend(!send);\n        retry();\n        refetchRef.current && refetchRef.current.retry();\n      },\n      onError: err => {\n        setErrorMessage('Something went wrong Please try again later!');\n      }\n    });\n  };\n\n  const handlePlayAsIndividual = () => {\n    PlayAsIndividualMutation(environment, {\n      onCompleted: () => {\n        setSuccessMessage('Redirecting ....');\n        router.push(\"/dashboard/payment\");\n        refetch();\n      },\n      onError: () => {\n        setErrorMessage('Something went wrong Please try again later!');\n      }\n    });\n  };\n\n  const handleChange = (event, newValue) => {\n    setTab(newValue);\n  };\n\n  const logoutHandle = () => {\n    cookie.remove('authorization');\n    router.push('/');\n  };\n\n  const handleClose = () => setOpenDialog(false);\n\n  return __jsx(React.Fragment, null, __jsx(DialogBox, {\n    environment: environment,\n    openDialog: openDialog,\n    handleClose: handleClose,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage,\n    refetch: refetch\n  }), __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(CustomDrawer, {\n    name: viewer.name,\n    username: viewer.email,\n    open: open,\n    setOpen: setOpen,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage\n  }), __jsx(Navbar, {\n    setOpen: setOpen,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage\n  }), __jsx(Grid, {\n    container: true,\n    component: \"main\",\n    onClick: () => setOpen(false)\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 8,\n    className: classes.leftGrid\n  }, __jsx(Box, {\n    mt: 5,\n    mb: 5,\n    className: classes.header\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"flex-start\",\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    sm: 4,\n    alignItems: \"center\"\n  }, __jsx(\"img\", {\n    src: \"/dashboard.png\",\n    className: classes.dashboardImg\n  })), __jsx(Grid, {\n    item: true,\n    sm: 8\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: classes.Head_title\n  }, __jsx(\"b\", null, \"Hello, \", viewer.name)), __jsx(Typography, null, \"Welcome to your ChimeraX dashboard\")))), __jsx(Box, {\n    ml: 2,\n    mb: 2\n  }, __jsx(Typography, {\n    variant: \"h5\"\n  }, \"Step-2, Select whether you want to play as an individual or as a team?\")), __jsx(Box, null, __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Radio, {\n    className: classes.radioBtn,\n    checked: radio === 'A',\n    value: \"A\",\n    name: \"radio-button-demo\",\n    inputProps: {\n      'aria-label': 'A'\n    },\n    onClick: () => setRadio('A')\n  }), __jsx(\"div\", null, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Play as an Individual\"), __jsx(Typography, null, \"Be a lone ranger\"))), __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Radio, {\n    className: classes.radioBtn,\n    checked: radio === 'B',\n    value: \"B\",\n    name: \"radio-button-demo\",\n    inputProps: {\n      'aria-label': 'B'\n    },\n    onClick: () => setRadio('B')\n  }), __jsx(\"div\", null, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Play as a Team\"), __jsx(Typography, null, \"Be a dynamic duo\")))), radio === 'B' && __jsx(Box, {\n    ml: 8\n  }, __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Typography, {\n    variant: \"body1\"\n  }, \"Send Invitation to your teammate\")), __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Autocomplete, {\n    id: \"combo-box-demo\" //@ts-ignore\n    ,\n    options: dummyUsers,\n    value: receiver,\n    onChange: (event, newValue) => {\n      setReceiver(newValue);\n    },\n    getOptionLabel: option => `${option.name} ${option.email}`,\n    renderOption: option => __jsx(React.Fragment, null, __jsx(\"span\", null, __jsx(Avatar, {\n      alt: \"Remy Sharp\",\n      src: \"/dummy.png\"\n    })), \"\\xA0 \", option.name, \" (\", option.email, \")\"),\n    style: {\n      width: 400\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Search Team Member\",\n      variant: \"outlined\",\n      size: \"small\"\n    }))\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: receiver === null,\n    onClick: handleSendInvitation,\n    className: classes.invitation_button\n  }, \"Send\", ' '))), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: radio === 'B' // onClick={handlePlayAsIndividual}\n    ,\n    onClick: () => {\n      setOpenDialog(true);\n    },\n    className: classes.proceed_button\n  }, \"PROCEED\", ' ')), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4 //   component={Paper} elevation={6} square\n\n  }, __jsx(Paper, {\n    elevation: 6,\n    className: classes.container\n  }, __jsx(Tabs, {\n    value: tab,\n    onChange: handleChange,\n    indicatorColor: \"primary\" // textColor=\"primary\"\n    ,\n    variant: \"fullWidth\"\n  }, __jsx(Tab, {\n    label: \"Sent Invitations\"\n  }), __jsx(Tab, {\n    label: \"Received Invitations\"\n  }), \"classsName=\", classes.tab), __jsx(Divider, null), tab === 0 ? __jsx(SendInvitation, {\n    refetchRef: refetchRef,\n    send: send,\n    environment: environment,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage\n  }) : __jsx(ReceivedInvitation, {\n    refetchRef: refetchRef,\n    environment: environment,\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage,\n    refetch: refetch\n  }))))));\n};\n\nexport default Team;","map":null,"metadata":{},"sourceType":"module"}