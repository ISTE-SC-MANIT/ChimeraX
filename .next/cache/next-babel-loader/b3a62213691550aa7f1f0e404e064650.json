{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { createStyles, withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\nvar styles = function styles(theme) {\n  return createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2)\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500]\n    }\n  });\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      margin: 0,\n      padding: 0,\n      boxSizing: 'border-box',\n      minHeight: '100vh'\n    },\n    box: {\n      width: '80%',\n      border: \"3px solid \".concat(theme.palette.divider)\n    },\n    dialogActions: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    nextBtn: _defineProperty({}, theme.breakpoints.down('lg'), {\n      margin: theme.spacing(1)\n    }),\n    reviewBtn: _defineProperty({}, theme.breakpoints.down('md'), {\n      margin: theme.spacing(1)\n    }),\n    noSelect: {\n      userSelect: 'none'\n    }\n  };\n});\nvar DialogTitle = withStyles(styles)(function (props) {\n  var children = props.children,\n      classes = props.classes,\n      onClose = props.onClose,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"onClose\"]);\n\n  return __jsx(MuiDialogTitle, _extends({\n    disableTypography: true,\n    className: classes.root\n  }, other), __jsx(Typography, {\n    variant: \"h6\"\n  }, children));\n});\nvar DialogContent = withStyles(function (theme) {\n  return {\n    root: {\n      padding: theme.spacing(2)\n    }\n  };\n})(MuiDialogContent);\nvar DialogActions = withStyles(function (theme) {\n  return {\n    root: {\n      margin: 0,\n      padding: theme.spacing(1)\n    }\n  };\n})(MuiDialogActions);\n\nvar QuestionComponent = function QuestionComponent(_ref) {\n  var question = _ref.question,\n      answer = _ref.answer,\n      setAnswers = _ref.setAnswers,\n      visitedAnswers = _ref.visitedAnswers,\n      setVisitedAnswers = _ref.setVisitedAnswers,\n      reviewedAnswers = _ref.reviewedAnswers,\n      setReviewedAnswers = _ref.setReviewedAnswers,\n      currentQuestion = _ref.currentQuestion,\n      setCurrentQuestion = _ref.setCurrentQuestion,\n      questions = _ref.questions,\n      role = _ref.role;\n\n  var getQuestionAnswer = function getQuestionAnswer(questionNo) {\n    console.log(answer);\n    return answer.find(function (a) {\n      return a.questionNumber === questionNo;\n    }).answer;\n  };\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      localState = _React$useState2[0],\n      setLocalState = _React$useState2[1];\n\n  React.useEffect(function () {\n    setLocalState(getQuestionAnswer(question.questionNo));\n    var exists = visitedAnswers.find(function (answer) {\n      return answer === question.id;\n    });\n\n    if (!Boolean(exists)) {\n      setVisitedAnswers([].concat(_toConsumableArray(visitedAnswers), [question.id]));\n    }\n  }, [question]);\n  var classes = useStyles();\n\n  var handleClose = function handleClose() {};\n\n  var handleNext = function handleNext() {\n    var index = questions.findIndex(function (question) {\n      return question.id === currentQuestion.id;\n    });\n    setCurrentQuestion(questions[index + 1]);\n  };\n\n  var handlePrevious = function handlePrevious() {\n    var index = questions.findIndex(function (question) {\n      return question.id === currentQuestion.id;\n    });\n    setCurrentQuestion(questions[index - 1]);\n  };\n\n  var saveAnswer = function saveAnswer() {\n    var index = answer.findIndex(function (answer) {\n      return answer.questionNumber === question.questionNo;\n    });\n\n    var answerCopy = _toConsumableArray(answer);\n\n    answerCopy[index].answer = localState;\n    setAnswers(answerCopy);\n  };\n\n  var resetAnswer = function resetAnswer() {\n    var index = answer.findIndex(function (answer) {\n      return answer.questionNumber === question.questionNo;\n    });\n\n    var answerCopy = _toConsumableArray(answer);\n\n    answerCopy[index].answer = \"\";\n    setAnswers(answerCopy);\n    setLocalState(\"\");\n  };\n\n  var handleReview = function handleReview() {\n    var exists = reviewedAnswers.find(function (answer) {\n      return answer === question.id;\n    });\n\n    if (!Boolean(exists)) {\n      setReviewedAnswers([].concat(_toConsumableArray(reviewedAnswers), [question.id]));\n    } else {\n      var answerCopy = _toConsumableArray(reviewedAnswers);\n\n      var i = reviewedAnswers.findIndex(function (answer) {\n        return answer === question.id;\n      });\n      answerCopy.splice(i, 1);\n      setReviewedAnswers(answerCopy);\n    }\n  };\n\n  var isMarkedForReview = function isMarkedForReview() {\n    var exists = reviewedAnswers.find(function (answer) {\n      return answer === question.id;\n    });\n    return Boolean(exists);\n  };\n\n  return __jsx(\"div\", null, __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: classes.root\n  }, __jsx(Box, {\n    className: classes.box\n  }, __jsx(DialogTitle, {\n    id: \"customized-dialog-title\",\n    onClose: handleClose\n  }, \"Question \", question.questionNo), __jsx(DialogContent, {\n    dividers: true\n  }, __jsx(Typography, {\n    gutterBottom: true\n  }, question.question), __jsx(Box, null, __jsx(TextField, {\n    fullWidth: true,\n    multiline: true,\n    label: \"Answer\",\n    onChange: function onChange(e) {\n      setLocalState(e.target.value);\n    },\n    value: localState,\n    disabled: role === \"TEAM_HELPER\"\n  }))), __jsx(DialogActions, {\n    className: classes.dialogActions\n  }, __jsx(Box, {\n    style: {\n      marginRight: 'auto'\n    },\n    className: classes.nextBtn\n  }, __jsx(Box, null, __jsx(Button, {\n    onClick: handlePrevious,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: currentQuestion.questionNo === 1\n  }, \"Previous\"), \"\\xA0\\xA0\\xA0\", __jsx(Button, {\n    onClick: handleNext,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: currentQuestion.questionNo === 30\n  }, \"Next\"), \"\\xA0\\xA0\\xA0\", role === \"TEAM_LEADER\" && __jsx(Button, {\n    onClick: handleReview,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.reviewBtn\n  }, isMarkedForReview() ? 'Un-mark for review' : 'mark for review'))), role === \"TEAM_LEADER\" && __jsx(Button, {\n    onClick: resetAnswer,\n    disabled: !Boolean(getQuestionAnswer(question.questionNo)),\n    variant: \"contained\",\n    color: \"primary\"\n  }, \"Reset\"), role === \"TEAM_LEADER\" && __jsx(Button, {\n    onClick: saveAnswer,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: Boolean(getQuestionAnswer(question.questionNo))\n  }, \"Save Answer\")))));\n};\n\nexport default QuestionComponent;","map":null,"metadata":{},"sourceType":"module"}