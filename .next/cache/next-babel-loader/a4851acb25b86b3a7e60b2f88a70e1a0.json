{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from '@material-ui/lab/Alert';\nimport \"regenerator-runtime/runtime\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { useRouter, Router } from \"next/router\";\nimport LoadingScreen from \"../components/loadingScreen\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport query from \"../components/relay/queries/AppViewerQuery\";\nimport { QueryRenderer } from \"react-relay\";\nimport { makeEnvironment } from \"../components/relay/environment\";\nimport { themeProps, defaultPrimary, defaultSecondary, defaultMode, themeContext, toggleMode } from \"../components/theme\";\nconst useStyles = makeStyles(theme => ({\n  linearLoading: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: theme.zIndex.modal + 1\n  },\n  error: {\n    background: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n    padding: theme.spacing(1, 3)\n  }\n}));\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  const [success, setSuccess] = React.useState(false);\n  const [errors, setError] = React.useState(false);\n  const [successMsg, setSuccessMsg] = React.useState(\"\");\n  const [errorMsg, setErrorMsg] = React.useState(\"\");\n  const router = useRouter();\n  const classes = useStyles();\n  const paths = router.route.split(\"/\");\n  const first = paths[1];\n  const isProtectedRoute = React.useMemo(() => {\n    return first === \"dashboard\";\n  }, [first]);\n  const environment = React.useMemo(() => {\n    if (first === \"dashboard\") return makeEnvironment();\n    return null;\n  }, [first]);\n  /* Page loading animation */\n\n  const [routeChange, setRouteChange] = React.useState(false);\n  Router.events.on(\"routeChangeStart\", () => {\n    setRouteChange(true);\n  });\n  Router.events.on(\"routeChangeComplete\", () => setRouteChange(false));\n  Router.events.on(\"routeChangeError\", () => setRouteChange(false));\n  const [loading, setLoading] = React.useState(false);\n  const [currentTheme, setCurrentTheme] = React.useState(() => createMuiTheme({\n    typography: {\n      fontFamily: ['Montserrat', 'Roboto', 'sans-serif', 'Arial', '-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'].join(',')\n    },\n    props: themeProps,\n    palette: {\n      primary: {\n        main: defaultPrimary\n      },\n      secondary: {\n        main: defaultSecondary\n      },\n      type: defaultMode\n    }\n  }));\n\n  const handleClose = event => {\n    setSuccess(false);\n    setError(false);\n  };\n\n  const setSuccessMessage = msg => {\n    setSuccessMsg(msg);\n    setSuccess(true);\n  };\n\n  const setErrorMessage = msg => {\n    setErrorMsg(msg);\n    setError(true);\n  };\n  /* Error reporting */\n\n\n  return __jsx(ThemeProvider, {\n    theme: currentTheme\n  }, __jsx(CssBaseline, null), __jsx(themeContext.Provider, {\n    value: {\n      mode: currentTheme.palette.type,\n      primary: currentTheme.palette.primary.main,\n      secondary: currentTheme.palette.secondary.main,\n      toggleMode: () => toggleMode(setCurrentTheme),\n      updateColors: () => {\n        /* Do nothing */\n      }\n    }\n  }, routeChange && __jsx(LinearProgress, {\n    color: \"secondary\",\n    className: classes.linearLoading\n  }), !isProtectedRoute ? __jsx(React.Fragment, null, __jsx(Component, _extends({}, pageProps, {\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage\n  })), __jsx(Snackbar, {\n    open: success,\n    autoHideDuration: 6000,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: \"success\"\n  }, successMsg)), __jsx(Snackbar, {\n    open: errors,\n    autoHideDuration: 6000,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: \"error\"\n  }, errorMsg))) : __jsx(QueryRenderer, {\n    environment: environment,\n    query: query,\n    variables: {},\n    render: ({\n      error,\n      props,\n      retry\n    }) => {\n      if (error) {\n        setErrorMessage(\"Please log in to continue\");\n        router.push(\"/\");\n        return null;\n      } else if (props) {\n        return __jsx(React.Fragment, null, __jsx(Component, _extends({}, pageProps, {\n          viewer: props.viewer,\n          refetch: retry,\n          environment: environment,\n          setSuccessMessage: setSuccessMessage,\n          setErrorMessage: setErrorMessage\n        })), __jsx(Snackbar, {\n          open: success,\n          autoHideDuration: 3000,\n          onClose: handleClose\n        }, __jsx(Alert, {\n          onClose: handleClose,\n          severity: \"success\"\n        }, successMsg)), __jsx(Snackbar, {\n          open: errors,\n          autoHideDuration: 3000,\n          onClose: handleClose\n        }, __jsx(Alert, {\n          onClose: handleClose,\n          severity: \"error\"\n        }, errorMsg)));\n      } else {\n        return __jsx(LoadingScreen, {\n          loading: true\n        });\n      }\n    }\n  })));\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}