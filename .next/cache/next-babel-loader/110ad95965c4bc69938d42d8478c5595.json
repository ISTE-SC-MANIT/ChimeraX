{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Image from 'next/image';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, makeStyles, useTheme } from '@material-ui/core/styles';\nimport * as yup from \"yup\";\nimport axios from \"axios\";\nimport { authenticate } from '../components/utils';\nimport { useRouter } from 'next/router';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Formik, Form, Field } from 'formik';\nconst LoginButton = withStyles(theme => ({\n  root: {\n    color: theme.palette.getContrastText('#3997F5'),\n    backgroundColor: '#3997F5',\n    border: '2px solid white',\n    borderRadius: '50px',\n    padding: '10px 20px',\n    '&:hover': {\n      backgroundColor: '#1976D2'\n    }\n  }\n}))(Button);\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100vh'\n  },\n  image: {\n    backgroundImage: `url('/Vector2.png')`,\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: 'white',\n    // theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: `#3997F5`\n    } // [theme.breakpoints.down('xs')]: {\n    //   backgroundColor:\n    //     theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    // },\n\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: '#3997F5'\n  },\n  form: {\n    width: '100%',\n    // Fix IE11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  logo: {\n    // backgroundImage: `url('/chimerax.png')`,\n    width: 'fit-content',\n    height: '100px',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginTop: theme.spacing(5)\n  },\n  imageTitle: {\n    padding: `${theme.spacing(2)}px ${theme.spacing(3)}px `,\n    border: '2px solid currentColor',\n    borderRadius: '20px'\n  },\n  imageButton: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.palette.common.white\n  },\n  imageTitle2: {\n    color: theme.palette.common.white\n  },\n  vector: {\n    width: '100%',\n    marginTop: theme.spacing(4)\n  },\n  imageV: {\n    width: '100% !important',\n    marginLeft: `${theme.spacing(8)} !important`,\n    height: '600px'\n  },\n  customButton: {\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n  base: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(6)\n  },\n  logoIcon: {\n    border: '2px solid black',\n    borderRadius: '50px'\n  },\n  loginBtn: {\n    marginBottom: '10px',\n    [theme.breakpoints.up('md')]: {\n      marginBottom: '100px'\n    }\n  }\n}));\n\nconst VectorImg = classes => {\n  const theme = useTheme();\n  const mobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  if (mobile) {\n    return __jsx(Box, {\n      className: classes.vector\n    }, __jsx(Image, {\n      src: \"/signin.png\",\n      alt: \"logo\",\n      className: classes.imageV,\n      width: window.innerWidth,\n      height: window.innerWidth / 1.25\n    }));\n  }\n\n  return __jsx(Box, {\n    className: classes.vector\n  }, __jsx(Image, {\n    src: \"/signin.png\",\n    alt: \"logo\",\n    className: classes.imageV,\n    width: 460,\n    height: 367\n  }));\n};\n\nconst SignIn = ({\n  setErrorMessage,\n  setSuccessMessage\n}) => {\n  const classes = useStyles();\n  const [formData, setFormData] = React.useState({\n    email: \"\",\n    password: \"\",\n    text: \"Sign Up\"\n  });\n  const [visible, setVisible] = React.useState(false);\n  const router = useRouter();\n\n  const handleChange = field => e => {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n      [field]: e.target.value\n    }));\n  };\n\n  const initialValues = {\n    password: \"\",\n    email: \"\"\n  };\n  const validationSchema = yup.object({\n    email: yup.string().email(\"Provide a valid Email ID\").required(\"Email cannot be empty\"),\n    password: yup.string().min(6, \"Password must be minimum of 6 characters\").required(\"Email cannot be empty\")\n  });\n\n  const handleSubmit = values => {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n      text: \"Submitting .....\"\n    }));\n    axios.post(`${process.env.NEXT_PUBLIC_BACKEND}/api/register`, _objectSpread({}, values)).then(response => {\n      authenticate(response, () => {\n        router.push(\"/dashboard/register\");\n      });\n      setSuccessMessage(\"Successfully signed in\");\n    }).catch(error => {\n      setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        text: 'Sign Up'\n      }));\n      setErrorMessage(error.response.data.errors);\n      return error;\n    });\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    component: \"main\",\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    component: Paper,\n    elevation: 0,\n    square: true\n  }, __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(Avatar, {\n    className: classes.avatar\n  }, __jsx(LockOutlinedIcon, null)), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h2\"\n  }, \"Sign Up\"), __jsx(Formik, {\n    onSubmit: values => handleSubmit(values),\n    validationSchema: validationSchema,\n    initialValues: initialValues\n  }, __jsx(Form, {\n    \"aria-label\": \"login up form\",\n    id: \"log-in-form\"\n  }, __jsx(Field, {\n    name: \"email\"\n  }, ({\n    field,\n    meta\n  }) => __jsx(TextField, _extends({\n    fullWidth: true,\n    id: \"name-input\",\n    label: \"Email Address\",\n    required: true\n  }, field, {\n    error: !!(meta.touched && meta.error),\n    helperText: meta.touched ? meta.error : '',\n    variant: \"outlined\" // className={classes.field}\n    ,\n    margin: \"normal\"\n  }))), __jsx(Field, {\n    name: \"password\"\n  }, ({\n    field,\n    meta\n  }) => __jsx(TextField, _extends({\n    fullWidth: true,\n    id: \"password-input\",\n    label: \"Password\",\n    required: true\n  }, field, {\n    error: !!(meta.touched && meta.error),\n    helperText: meta.touched ? meta.error : '',\n    variant: \"outlined\" // className={classes.field}\n    ,\n    margin: \"normal\",\n    type: \"password\"\n  }))), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      value: \"remember\",\n      color: \"primary\"\n    }),\n    label: \"Remember me\"\n  }), __jsx(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    className: classes.submit,\n    color: \"primary\"\n  }, formData.text), __jsx(Box, {\n    mt: 5\n  }, ' ', __jsx(Typography, {\n    align: \"center\",\n    variant: \"subtitle1\"\n  }, \"Or Sign up with other social platforms\")), __jsx(Box, null, __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(IconButton, null, __jsx(\"img\", {\n    src: \"/google-logo.png\",\n    alt: \"google\",\n    height: 60,\n    className: classes.logoIcon\n  }))))))))), __jsx(Grid, {\n    item: true,\n    xs: false,\n    sm: 6,\n    className: classes.image\n  }, __jsx(Box, {\n    className: classes.logo\n  }, __jsx(Typography, {\n    component: \"span\",\n    variant: \"h3\",\n    color: \"inherit\",\n    className: classes.imageTitle2\n  }, \"One of us?\")), __jsx(Box, {\n    className: classes.loginBtn\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\"\n  }, __jsx(LoginButton, {\n    onClick: () => router.push(\"/\")\n  }, \"Log In\"))), __jsx(VectorImg, {\n    classes: classes\n  })));\n};\n\nexport default SignIn;","map":null,"metadata":{},"sourceType":"module"}