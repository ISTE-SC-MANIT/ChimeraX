{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { createStyles, withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = theme => createStyles({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: 0,\n    padding: 0,\n    boxSizing: 'border-box',\n    minHeight: '100vh'\n  },\n  box: {\n    width: '80%',\n    border: `3px solid ${theme.palette.divider}`\n  },\n  dialogActions: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  nextBtn: {\n    // marginRight: 'auto',\n    [theme.breakpoints.down('lg')]: {\n      margin: theme.spacing(1)\n    }\n  },\n  reviewBtn: {\n    [theme.breakpoints.down('md')]: {\n      margin: theme.spacing(1)\n    }\n  },\n  noSelect: {\n    userSelect: 'none'\n  }\n}));\nconst DialogTitle = withStyles(styles)(props => {\n  const {\n    children,\n    classes,\n    onClose\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"onClose\"]);\n\n  return __jsx(MuiDialogTitle, _extends({\n    disableTypography: true,\n    className: classes.root\n  }, other), __jsx(Typography, {\n    variant: \"h6\"\n  }, children));\n});\nconst DialogContent = withStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}))(MuiDialogContent);\nconst DialogActions = withStyles(theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1)\n  }\n}))(MuiDialogActions);\n\nconst QuestionComponent = ({\n  question,\n  answer,\n  setAnswers,\n  visitedAnswers,\n  setVisitedAnswers,\n  reviewedAnswers,\n  setReviewedAnswers,\n  currentQuestion,\n  setCurrentQuestion,\n  questions,\n  role\n}) => {\n  const getQuestionAnswer = questionNo => {\n    console.log(answer);\n    return answer.find(a => a.questionNumber === questionNo).answer;\n  };\n\n  const [localState, setLocalState] = React.useState(\"\");\n  React.useEffect(() => {\n    setLocalState(getQuestionAnswer(question.questionNo));\n    const exists = visitedAnswers.find(answer => answer === question.id);\n\n    if (!Boolean(exists)) {\n      setVisitedAnswers([...visitedAnswers, question.id]);\n    }\n  }, [question]);\n  const classes = useStyles();\n\n  const handleClose = () => {};\n\n  const handleNext = () => {\n    const index = questions.findIndex(question => question.id === currentQuestion.id);\n    setCurrentQuestion(questions[index + 1]);\n  };\n\n  const handlePrevious = () => {\n    const index = questions.findIndex(question => question.id === currentQuestion.id);\n    setCurrentQuestion(questions[index - 1]);\n  };\n\n  const saveAnswer = () => {\n    const index = answer.findIndex(answer => answer.questionNumber === question.questionNo);\n    let answerCopy = [...answer];\n    answerCopy[index].answer = localState;\n    setAnswers(answerCopy);\n  };\n\n  const resetAnswer = () => {\n    const index = answer.findIndex(answer => answer.questionNumber === question.questionNo);\n    let answerCopy = [...answer];\n    answerCopy[index].answer = \"\";\n    setAnswers(answerCopy);\n    setLocalState(\"\");\n  };\n\n  const handleReview = () => {\n    const exists = reviewedAnswers.find(answer => answer === question.id);\n\n    if (!Boolean(exists)) {\n      setReviewedAnswers([...reviewedAnswers, question.id]);\n    } else {\n      let answerCopy = [...reviewedAnswers];\n      const i = reviewedAnswers.findIndex(answer => answer === question.id);\n      answerCopy.splice(i, 1);\n      setReviewedAnswers(answerCopy);\n    }\n  };\n\n  const isMarkedForReview = () => {\n    const exists = reviewedAnswers.find(answer => answer === question.id);\n    return Boolean(exists);\n  };\n\n  return __jsx(\"div\", null, __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: classes.root\n  }, __jsx(Box, {\n    className: classes.box\n  }, __jsx(DialogTitle, {\n    id: \"customized-dialog-title\",\n    onClose: handleClose\n  }, \"Question \", question.questionNo), __jsx(DialogContent, {\n    dividers: true\n  }, __jsx(Typography, {\n    gutterBottom: true\n  }, question.question), __jsx(Box, null, __jsx(TextField, {\n    fullWidth: true,\n    multiline: true,\n    label: \"Answer\",\n    onChange: e => {\n      setLocalState(e.target.value);\n    },\n    value: localState,\n    disabled: role === \"TEAM_HELPER\"\n  }))), __jsx(DialogActions, {\n    className: classes.dialogActions\n  }, __jsx(Box, {\n    style: {\n      marginRight: 'auto'\n    },\n    className: classes.nextBtn\n  }, __jsx(Box, null, __jsx(Button, {\n    onClick: handlePrevious,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: currentQuestion.questionNo === 1\n  }, \"Previous\"), \"\\xA0\\xA0\\xA0\", __jsx(Button, {\n    onClick: handleNext,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: currentQuestion.questionNo === 30\n  }, \"Next\"), \"\\xA0\\xA0\\xA0\", role === \"TEAM_LEADER\" && __jsx(Button, {\n    onClick: handleReview,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.reviewBtn\n  }, isMarkedForReview() ? 'Un-mark for review' : 'mark for review'))), role === \"TEAM_LEADER\" && __jsx(Button, {\n    onClick: resetAnswer,\n    disabled: !Boolean(getQuestionAnswer(question.questionNo)),\n    variant: \"contained\",\n    color: \"primary\"\n  }, \"Reset\"), role === \"TEAM_LEADER\" && __jsx(Button, {\n    onClick: saveAnswer,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: Boolean(getQuestionAnswer(question.questionNo))\n  }, \"Save Answer\")))));\n};\n\nexport default QuestionComponent;","map":null,"metadata":{},"sourceType":"module"}