{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { useQuery } from \"relay-hooks\";\nimport query from \"../components/relay/queries/GetQuestionsQuery\";\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport AccessAlarmOutlinedIcon from '@material-ui/icons/AccessAlarmOutlined';\nimport SubmitQuizMutation from \"../components/relay/mutations/SubmitQuizMutation\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Timer from './timer';\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport QuestionPanel from './questionPanel';\nimport Stats from './statistics';\nimport QuestionComponent from './questionComponent';\nimport LoadingScreen from './loadingScreen';\nimport timeQuery from \"../components/relay/queries/GetQuizStartTimeQuery\";\nimport { useRouter } from 'next/router';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100vh'\n  },\n  paper: {\n    margin: theme.spacing(2, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%',\n    // Fix IE11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  divider: {\n    width: \"100%\",\n    margin: theme.spacing(2, 0)\n  }\n}));\n\nconst QuizPage = ({\n  environment,\n  viewer,\n  setSuccessMessage,\n  setErrorMessage\n}) => {\n  const classes = useStyles();\n  const {\n    data,\n    error,\n    retry,\n    isLoading\n  } = useQuery(query);\n  const {\n    data: startTimeData,\n    error: startTimeError,\n    retry: startTimeRetry,\n    isLoading: startTimeIsLoading\n  } = useQuery(timeQuery);\n  const [currentQuestion, setCurrentQuestion] = React.useState(null);\n  const [answer, setAnswer] = React.useState([]);\n  const [reviewedAnswers, setReviewedAnswers] = React.useState([]);\n  const [visitedAnswers, setVisitedAnswers] = React.useState([]);\n  const router = useRouter();\n  React.useEffect(() => {\n    setCurrentQuestion(data === null || data === void 0 ? void 0 : data.getQuestions[0]);\n\n    if (Boolean(data)) {\n      const answerMap = data.getQuestions.map(question => {\n        return {\n          answer: \"\",\n          questionId: question.id,\n          questionNumber: question.questionNo\n        };\n      });\n      setAnswer(answerMap);\n    }\n  }, [data]);\n\n  if (isLoading || startTimeIsLoading) {\n    return __jsx(LoadingScreen, {\n      loading: true\n    });\n  }\n\n  const handleQuestionClick = questionNo => {\n    const clickedQuestion = data.getQuestions.find(ques => ques.questionNo === questionNo);\n    setCurrentQuestion(clickedQuestion);\n  };\n\n  const handleSubmitQuizMutation = () => {\n    const input = {\n      responses: answer\n    };\n    SubmitQuizMutation(environment, input, {\n      onCompleted: () => {\n        setSuccessMessage(\"Quiz was successfully Submitted\"), router.push(\"/login\");\n      },\n      onError: () => {\n        setErrorMessage(\"Something went wrong\");\n      }\n    });\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    component: \"main\",\n    className: classes.root\n  }, __jsx(CssBaseline, null), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    lg: 8,\n    style: {\n      position: \"relative\"\n    }\n  }, currentQuestion ? __jsx(QuestionComponent, {\n    question: currentQuestion,\n    answer: answer,\n    setAnswers: setAnswer,\n    reviewedAnswers: reviewedAnswers,\n    setReviewedAnswers: setReviewedAnswers,\n    visitedAnswers: visitedAnswers,\n    setVisitedAnswers: setVisitedAnswers,\n    currentQuestion: currentQuestion,\n    setCurrentQuestion: setCurrentQuestion,\n    questions: data.getQuestions,\n    role: viewer.role\n  }) : __jsx(LoadingScreen, {\n    loading: true\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    lg: 4,\n    component: Paper,\n    elevation: 6,\n    square: true\n  }, __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(Avatar, {\n    className: classes.avatar\n  }, __jsx(AccessAlarmOutlinedIcon, null)), __jsx(Box, {\n    mt: 1\n  }, __jsx(Timer, {\n    startTime: startTimeData,\n    onTimeUp: handleSubmitQuizMutation\n  }))), __jsx(Divider, {\n    variant: \"middle\",\n    className: classes.divider\n  }), __jsx(QuestionPanel, {\n    questions: data.getQuestions,\n    onQuestionClick: handleQuestionClick,\n    currentQuestion: currentQuestion,\n    reviewedAnswers: reviewedAnswers,\n    answers: answer,\n    visitedAnswers: visitedAnswers\n  }), __jsx(Divider, {\n    variant: \"middle\",\n    className: classes.divider\n  }), viewer.role === \"TEAM_LEADER\" && __jsx(React.Fragment, null, \"     \", __jsx(Stats, {\n    reviewedAnswers: reviewedAnswers,\n    answers: answer,\n    visitedAnswers: visitedAnswers\n  }), __jsx(Divider, {\n    variant: \"middle\",\n    className: classes.divider\n  }), __jsx(Box, {\n    mb: 2,\n    width: \"100%\"\n  }, __jsx(ListItemText, {\n    primary: \"Submit Quiz\",\n    secondary: \"Quiz will be submitted automatically when time is over\",\n    primaryTypographyProps: {\n      variant: \"h6\"\n    }\n  })), __jsx(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: () => handleSubmitQuizMutation()\n  }, \"SUBMIT\")))));\n};\n\nexport default QuizPage;","map":null,"metadata":{},"sourceType":"module"}