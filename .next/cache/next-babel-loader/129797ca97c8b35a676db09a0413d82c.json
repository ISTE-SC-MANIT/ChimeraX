{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nvar Timer = function Timer(_ref) {\n  var startTime = _ref.startTime,\n      onTimeUp = _ref.onTimeUp;\n  var currentTime = new Date().getMinutes();\n  var quizStartTime = new Date(startTime.getQuizDetails.quizStartTime).getMinutes();\n  var timeSpent = currentTime - quizStartTime;\n\n  var _React$useState = React.useState({\n    minute: 30 - timeSpent,\n    seconds: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      time = _React$useState2[0],\n      setTime = _React$useState2[1];\n\n  React.useEffect(function () {\n    var timer = setInterval(function () {\n      if (time.seconds > 0) {\n        setTime(_objectSpread(_objectSpread({}, time), {}, {\n          seconds: time.seconds - 1\n        }));\n      }\n\n      if (time.seconds === 0) {\n        if (time.minute === 0) {\n          onTimeUp();\n          clearInterval(timer);\n        } else {\n          setTime({\n            minute: time.minute - 1,\n            seconds: 59\n          });\n        }\n      }\n    }, 1000);\n    return function () {\n      return clearTimeout(timer);\n    };\n  });\n  return __jsx(React.Fragment, null, \" \", __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h5\"\n  }, time.minute === 0 && time.seconds === 0 ? __jsx(React.Fragment, null, \"Time's Up!\") : __jsx(React.Fragment, null, \"Time Remaining: \", time.minute, \":\", time.seconds < 10 ? \"0\".concat(time.seconds) : time.seconds)));\n};\n\nexport default Timer;","map":null,"metadata":{},"sourceType":"module"}