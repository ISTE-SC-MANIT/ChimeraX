{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Box from \"@material-ui/core/Box\";\nimport { useQuery } from \"relay-hooks\";\nimport query from \"../components/relay/queries/GetInvitationQuery\";\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DeleteInvitationMutation from \"../components/relay/mutations/DeleteInvitationMutation\";\n\nvar SendInvitation = function SendInvitation(_ref) {\n  var _data$getInvitations;\n\n  var refetchRef = _ref.refetchRef,\n      send = _ref.send,\n      environment = _ref.environment,\n      setSuccessMessage = _ref.setSuccessMessage,\n      setErrorMessage = _ref.setErrorMessage;\n\n  var _useQuery = useQuery(query),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      retry = _useQuery.retry,\n      isLoading = _useQuery.isLoading;\n\n  React.useEffect(function () {\n    retry();\n  }, [send]);\n\n  if (isLoading) {\n    return __jsx(Box, {\n      ml: 32,\n      mt: 12\n    }, __jsx(CircularProgress, {\n      disableShrink: true,\n      size: 60\n    }));\n  }\n\n  var handleDelete = function handleDelete(id) {\n    var input = {\n      invitationId: id\n    };\n    DeleteInvitationMutation(environment, input, id, {\n      onCompleted: function onCompleted() {\n        setSuccessMessage('Deleted');\n      },\n      onError: function onError(err) {\n        setErrorMessage(err.message);\n      }\n    });\n  };\n\n  var sentInvitations = data === null || data === void 0 ? void 0 : (_data$getInvitations = data.getInvitations) === null || _data$getInvitations === void 0 ? void 0 : _data$getInvitations.sentInvitations;\n  return __jsx(React.Fragment, null, __jsx(List, null, sentInvitations.map(function (invitation) {\n    if (Boolean(invitation)) return __jsx(ListItem, null, __jsx(ListItemAvatar, null, __jsx(Avatar, {\n      alt: \"Remy Sharp\",\n      src: \"/dummy.png\"\n    })), __jsx(ListItemText, {\n      primary: invitation.receiversName,\n      secondary: invitation.receiversEmail\n    }), __jsx(ListItemSecondaryAction, null, __jsx(Tooltip, {\n      title: \"Delete Invitation\"\n    }, __jsx(IconButton, {\n      color: \"secondary\",\n      \"aria-label\": \"delete\",\n      onClick: function onClick() {\n        return handleDelete(invitation._id);\n      }\n    }, __jsx(DeleteIcon, null)))));else {\n      return null;\n    }\n  })));\n};\n\nexport default SendInvitation;","map":null,"metadata":{},"sourceType":"module"}