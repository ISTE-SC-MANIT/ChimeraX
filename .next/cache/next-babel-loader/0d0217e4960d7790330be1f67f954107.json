{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Formik, Form, Field } from 'formik';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\n\nconst FormDialog = ({\n  open,\n  onClose,\n  setErrorMessage,\n  setSuccessMessage\n}) => {\n  // const [open, setOpen] = React.useState(false);\n  const [formData, setFormData] = React.useState({\n    email: ''\n  });\n  const router = useRouter();\n  const initialValues = {\n    email: ''\n  };\n\n  const handleChange = field => e => {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n      [field]: e.target.value\n    }));\n  };\n\n  const handleSubmit = values => {\n    setFormData(_objectSpread({}, formData));\n    onClose();\n    axios.put(`${process.env.NEXT_PUBLIC_BACKEND}/api/forgotpassword`, _objectSpread({}, values)).then(response => {\n      setSuccessMessage('Reset Link has been sent to your mail');\n    }).catch(error => {\n      setErrorMessage(error.response.data.errors);\n      return error;\n    });\n  };\n\n  const handleClickOpen = () => {\n    onClose();\n  };\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  return __jsx(\"div\", null, __jsx(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\"\n  }, __jsx(DialogTitle, {\n    id: \"form-dialog-title\"\n  }, \" Forgot Password ?\"), __jsx(DialogContent, null, __jsx(DialogContentText, null, \"Enter your email id , a reset link will be sent to your registered email id which will redirect you to update pass word page.\"), __jsx(Formik, {\n    onSubmit: values => handleSubmit(values),\n    initialValues: initialValues\n  }, __jsx(Form, {\n    id: \"myform\"\n  }, __jsx(Field, {\n    name: \"email\"\n  }, ({\n    field,\n    meta\n  }) => __jsx(TextField, _extends({\n    fullWidth: true,\n    id: \"email\",\n    label: \"Email Address\",\n    required: true\n  }, field, {\n    error: !!(meta.touched && meta.error),\n    helperText: meta.touched ? meta.error : '',\n    variant: \"outlined\" // className={classes.field}\n    ,\n    margin: \"normal\",\n    type: \"email\"\n  }))), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleClose,\n    color: \"primary\"\n  }, \"Cancel\"), __jsx(Button, {\n    type: \"submit\",\n    color: \"primary\"\n  }, \"Submit\")))))));\n};\n\nexport default FormDialog;","map":null,"metadata":{},"sourceType":"module"}