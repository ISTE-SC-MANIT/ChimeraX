{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from '@material-ui/lab/Alert';\nimport \"regenerator-runtime/runtime\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { useRouter, Router } from \"next/router\";\nimport LoadingScreen from \"../components/loadingScreen\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport query from \"../components/relay/queries/AppViewerQuery\";\nimport { QueryRenderer } from \"react-relay\";\nimport { makeEnvironment } from \"../components/relay/environment\";\nimport { themeProps, defaultPrimary, defaultSecondary, defaultMode, themeContext, toggleMode as _toggleMode } from \"../components/theme\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    linearLoading: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      right: 0,\n      zIndex: theme.zIndex.modal + 1\n    },\n    error: {\n      background: theme.palette.error.main,\n      color: theme.palette.error.contrastText,\n      padding: theme.spacing(1, 3)\n    }\n  };\n});\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nvar MyApp = function MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      success = _React$useState2[0],\n      setSuccess = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      errors = _React$useState4[0],\n      setError = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      successMsg = _React$useState6[0],\n      setSuccessMsg = _React$useState6[1];\n\n  var _React$useState7 = React.useState(\"\"),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      errorMsg = _React$useState8[0],\n      setErrorMsg = _React$useState8[1];\n\n  var router = useRouter();\n  var classes = useStyles();\n  var paths = router.route.split(\"/\");\n  var first = paths[1];\n  var isProtectedRoute = React.useMemo(function () {\n    return first === \"dashboard\";\n  }, [first]);\n  var environment = React.useMemo(function () {\n    if (first === \"dashboard\") return makeEnvironment();\n    return null;\n  }, [first]);\n  /* Page loading animation */\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      routeChange = _React$useState10[0],\n      setRouteChange = _React$useState10[1];\n\n  Router.events.on(\"routeChangeStart\", function () {\n    setRouteChange(true);\n  });\n  Router.events.on(\"routeChangeComplete\", function () {\n    return setRouteChange(false);\n  });\n  Router.events.on(\"routeChangeError\", function () {\n    return setRouteChange(false);\n  });\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      loading = _React$useState12[0],\n      setLoading = _React$useState12[1];\n\n  var _React$useState13 = React.useState(function () {\n    return createMuiTheme({\n      typography: {\n        fontFamily: ['Montserrat', 'Roboto', 'sans-serif', 'Arial', '-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'].join(',')\n      },\n      props: themeProps,\n      palette: {\n        primary: {\n          main: defaultPrimary\n        },\n        secondary: {\n          main: defaultSecondary\n        },\n        type: defaultMode\n      }\n    });\n  }),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      currentTheme = _React$useState14[0],\n      setCurrentTheme = _React$useState14[1];\n\n  var handleClose = function handleClose(event) {\n    setSuccess(false);\n    setError(false);\n  };\n\n  var setSuccessMessage = function setSuccessMessage(msg) {\n    setSuccessMsg(msg);\n    setSuccess(true);\n  };\n\n  var setErrorMessage = function setErrorMessage(msg) {\n    setErrorMsg(msg);\n    setError(true);\n  };\n  /* Error reporting */\n\n\n  return __jsx(ThemeProvider, {\n    theme: currentTheme\n  }, __jsx(CssBaseline, null), __jsx(themeContext.Provider, {\n    value: {\n      mode: currentTheme.palette.type,\n      primary: currentTheme.palette.primary.main,\n      secondary: currentTheme.palette.secondary.main,\n      toggleMode: function toggleMode() {\n        return _toggleMode(setCurrentTheme);\n      },\n      updateColors: function updateColors() {\n        /* Do nothing */\n      }\n    }\n  }, routeChange && __jsx(LinearProgress, {\n    color: \"secondary\",\n    className: classes.linearLoading\n  }), !isProtectedRoute ? __jsx(React.Fragment, null, __jsx(Component, _extends({}, pageProps, {\n    setSuccessMessage: setSuccessMessage,\n    setErrorMessage: setErrorMessage\n  })), __jsx(Snackbar, {\n    open: success,\n    autoHideDuration: 6000,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: \"success\"\n  }, successMsg)), __jsx(Snackbar, {\n    open: errors,\n    autoHideDuration: 6000,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: \"error\"\n  }, errorMsg))) : __jsx(QueryRenderer, {\n    environment: environment,\n    query: query,\n    variables: {},\n    render: function render(_ref2) {\n      var error = _ref2.error,\n          props = _ref2.props,\n          retry = _ref2.retry;\n\n      if (error) {\n        setErrorMessage(\"Please log in to continue\");\n        router.push(\"/\");\n        return null;\n      } else if (props) {\n        return __jsx(React.Fragment, null, __jsx(Component, _extends({}, pageProps, {\n          viewer: props.viewer,\n          refetch: retry,\n          environment: environment,\n          setSuccessMessage: setSuccessMessage,\n          setErrorMessage: setErrorMessage\n        })), __jsx(Snackbar, {\n          open: success,\n          autoHideDuration: 3000,\n          onClose: handleClose\n        }, __jsx(Alert, {\n          onClose: handleClose,\n          severity: \"success\"\n        }, successMsg)), __jsx(Snackbar, {\n          open: errors,\n          autoHideDuration: 3000,\n          onClose: handleClose\n        }, __jsx(Alert, {\n          onClose: handleClose,\n          severity: \"error\"\n        }, errorMsg)));\n      } else {\n        return __jsx(LoadingScreen, {\n          loading: true\n        });\n      }\n    }\n  })));\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}